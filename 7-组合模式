<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>7-组合模式</title>
</head>
<body>

<script>
    /*
     * 7-组合模式
     * 核心：用小的子对象来构建更大的子对象，而这些小的子对象本身也许是由更小的“孙对象”来构成的
     *      组合模式将对象组合成树形结构，以表示“部分-整体”的层次结构
     * 注意：组合模式是一种HAS-A（聚合）关系，而不是IS-A的关系
     *      组合模式要求组合对象和叶对象拥有相同的接口，而且要求对一组叶对象的操作必须具有一致性
     *      双向映射关系（比如一个员工既属于A部门又属于B部门）是不适合使用组合模式的
     * 适用场景：表示对象的部分-整体层次结构
     *          客户希望同一对待树中的所有对象
     * 目标：宏命令 & 文件夹扫描
     */


    /*******************场景1 宏命令********************************************/

    // 先构建宏命令类，拥有execute()接口
    var MacroCommand = function () {
        this.commandList = [];
    };

    MacroCommand.prototype = {
        constructor: MacroCommand,
        add: function (command) {
            this.commandList.push(command);
        },
        execute: function () {
            for (var i = 0, command; command = this.commandList[i++];) {
                command.execute();
            }
        }
    };

    // 构建6个子命令，它们与宏命令有相同的接口execute
    var openAcCommand = {
        execute: function () {
            console.log('打开空调');
        }
    };
    var openTvCommand = {
        execute: function () {
            console.log('打开电视');
        }
    };
    var openSoundCommand = {
        execute: function () {
            console.log('打开音响');
        }
    };
    var closeDoorCommand = {
        execute: function () {
            console.log('关门');
        }
    };
    var openPcCommand = {
        execute: function () {
            console.log('打开电脑');
        }
    };
    var loginQQCommand = {
        execute: function () {
            console.log('登陆QQ');
        }
    };

    // 客户现在来创建三个宏命令的实例
    var macroCommand1 = new MacroCommand();
    macroCommand1.add(openAcCommand);
    var macroCommand2 = new MacroCommand();
    macroCommand2.add(openTvCommand);
    macroCommand2.add(openSoundCommand);
    var macroCommand3 = new MacroCommand();
    macroCommand3.add(closeDoorCommand);
    macroCommand3.add(openPcCommand);
    macroCommand3.add(loginQQCommand);

    // 再创建一个大的宏命令
    var macroCommand = new MacroCommand();
    macroCommand.add(macroCommand1);
    macroCommand.add(macroCommand2);
    macroCommand.add(macroCommand3);

    // 执行大的宏命令
    macroCommand.execute();

    /**************************场景2 文件夹扫描*****************/

    // 文件夹类
    var Folder = function (name) {
        this.name = name;
        this.files = [];
        this.parent = null;
    };

    Folder.prototype = {
        constructor: Folder,
        add: function (file) {
            this.files.push(file);
            file.parent = this;
        },
        remove: function () {
            if (!this.parent) {     // 游离节点或者根节点
                return;
            }
            for (var files = this.parent.files, i = files.length - 1; i >= 0; i --) {
                var file = files[i];
                if (file === this) {
                    files.splice(i, 1);
                }
            }
        },
        scan: function () {
            console.log('开始扫描文件夹:' + this.name);
            for (var i = 0, file; file = this.files[i ++];) {
                file.scan();
            }
        }
    };

    // 文件类
    var File = function (name) {
        this.name = name;
        this.parent = null;
    };
    File.prototype = {
        constructor: File,
        remove: function () {
            if (!this.parent) {
                return;
            }
            for (var files = this.parent.files, i = files.length; i >= 0; i --) {
                var file = files[i];
                if (file === this) {
                    files.splice(i, 1);
                }
            }
        },
        scan: function () {
            console.log('正在扫描文件:' + this.name);
        }
    };

    // 客户开始操作文件夹
    var root = new Folder('root');
    var study = new Folder('study');
    var funny = new Folder('funny');

    var jsBook = new File('js高级程序设计');
    var ball = new File('篮球运球技巧');
    var todoList = new File('备忘录');

    root.add(study);
    root.add(funny);
    root.add(todoList);

    study.add(jsBook);
    funny.add(ball);

    root.scan();

    // 删除funny文件夹，再次扫描root文件夹
    funny.remove();
    root.scan();
</script>
</body>
</html>